#ifndef _REGISTERS_H_
#define _REGISTERS_H_
#include <stdint.h>

const uint16_t RegVersion = 0x4003;

#define BAG
// DO NOT EDIT THIS FILE. This output is automated and any changes will be overwritten.
// It uses the Fulfil.Libs.Machines.LFR.LFB1Register+Registers enum as input
typedef enum {
  REG_RegisterVersion=0,
  REG_OpenVal=1,
  REG_RoverMode=2,
  REG_Status=3,
  REG_CurrentPosAbs=4,
  REG_TravelDir=5,
  REG_PerpLineCount=6,
  REG_RoverCommandNo=7,
  REG_CompletedRoverCommandNo=8,
  REG_LastReceivedRoverCommandNo=9,
  REG_FailedRoverCommandNo=10,
  REG_LiftCommandNo=11,
  REG_LiftLoad=12,
  REG_LastReceivedLiftCommandNo=13,
  REG_CompletedLiftCommandNo=14,
  REG_LiftPosition=15,
  REG_BatteryRemaining=16,
  REG_FirmwareVersion=17,
  REG_ConfigDataVersion_L=18,
  REG_ConfigDataVersion_H=19,
  REG_RoverSerial=20,
  REG_ExtraSpace=21,
  REG_XbeeSerial_L=22,
  REG_XbeeSerial_H=23,
  REG_FailedLiftCommandNo=24,
  REG_TimeOffLine=25,
  REG_CurrentPos_L=26,
  REG_CurrentPos_H=27,
  REG_CurrentZero_L=28,
  REG_CurrentZero_H=29,
  REG_CommandStartPos_L=30,
  REG_CommandStartPos_H=31,
  REG_CurrentVelocity=32,
  REG_Temperature=33,
  REG_LineFollowSpeed=34,
  REG_ApproachSpeed=35,
  REG_TurnSpeed=36,
  REG_PerpLineGoal=37,
  REG_TurnRadius=38,
  REG_TurnAngle=39,
  REG_CurrentAngle=40,
  REG_TargetPos=41,
  REG_PosAbs=42,
  REG_OverrideSafety=43,
  REG_LiftTargetPosition=44,
  REG_DistToObj=45,
  REG_SlowdownFactor=46,
  REG_TimeStopped=47,
  REG_LiftLoadRaw_L=48,
  REG_LiftLoadRaw_H=49,
  REG_BuildDate_L=50,
  REG_BuildDate_H=51,
  REG_TimeUp_L=52,
  REG_TimeUp_H=53,
  REG_RtcTicks_L=54,
  REG_RtcTicks_H=55,
  REG_DapDate_L=56,
  REG_DapDate_H=57,
  REG_AdcCycleUs=58,
  REG_RoverCycleUs=59,
  REG_CommandTimeMs=60,
  REG_RoverStandbyTimeDs=61,
  REG_FwdLinePosition=62,
  REG_FwdLastLinePosition=63,
  REG_FwdLineStatus=64,
  REG_AftLinePosition=65,
  REG_AftLastLinePosition=66,
  REG_AftLineStatus=67,
  REG_DIOMode=68,
  REG_DIO=69,
  REG_DIO104CMode_L=70,
  REG_DIO104CMode_H=71,
  REG_DIO104C_L=72,
  REG_DIO104C_H=73,
  REG_PulsesPerMm=74,
  REG_RawDistOutput=75,
  REG_LiftStatus_L=76,
  REG_LiftStatus_H=77,
  REG_RoverLeftStatus_L=78,
  REG_RoverLeftStatus_H=79,
  REG_RoverRightStatus_L=80,
  REG_RoverRightStatus_H=81,
  REG_LiftRawPosition_L=82,
  REG_LiftRawPosition_H=83,
  REG_RoverLeftRawPosition_L=84,
  REG_RoverLeftRawPosition_H=85,
  REG_RoverRightRawPosition_L=86,
  REG_RoverRightRawPosition_H=87,
  REG_LiftRawVelocity_L=88,
  REG_LiftRawVelocity_H=89,
  REG_RoverLeftRawVelocity_L=90,
  REG_RoverLeftRawVelocity_H=91,
  REG_RoverRightRawVelocity_L=92,
  REG_RoverRightRawVelocity_H=93,
  REG_LiftCurrent=94,
  REG_RoverLeftCurrent=95,
  REG_RoverRightCurrent=96,
  REG_CurrentMA=97,
  REG_CoulombCountMAH=98,
  REG_LineStatus=99,
  REG_Adc0=100,
  REG_Adc1=101,
  REG_Adc2=102,
  REG_Adc3=103,
  REG_Adc4=104,
  REG_Adc5=105,
  REG_Adc6=106,
  REG_Adc7=107,
  REG_Adc8=108,
  REG_Adc9=109,
  REG_Adc10=110,
  REG_Adc11=111,
  REG_Adc12=112,
  REG_Adc13=113,
  REG_Adc14=114,
  REG_Adc15=115,
  REG_Adc16=116,
  REG_Adc17=117,
  REG_Adc18=118,
  REG_Adc19=119,
  REG_Adc20=120,
  REG_Adc21=121,
  REG_Adc22=122,
  REG_Adc23=123,
  REG_BoardADC0=124,
  REG_BoardADC1=125,
  REG_BoardADC2=126,
  REG_BoardADC3=127,
  REG_BoardADC4=128,
  REG_Blank=129,
  REG_Alarm_L=130,
  REG_Alarm_H=131,
  REG_ReadTimeout=132,
  REG_CommandBadLengthCount=133,
  REG_CommandProcessTime=134,
  REG_CommandBadCrcCount=135,
  REG_DigimeshFirmwareRev=136,
  REG_DigimeshHardwareRev=137,
  REG_RadioMaxPacketSize=138,
  REG_RadioRxPackets=139,
  REG_RadioTxPackets=140,
  REG_RadioStatistic=141,
  REG_RadioTxRetries=142,
  REG_RadioTxFailures=143,
  REG_ReceivedSignalStrength=144,
  REG_RadioReadBytes=145,
  REG_RadioWriteBytes=146,
  REG_XbeeTxInitiated=147,
  REG_XbeeTxCompleted=148,
  REG_LatestPacketId=149,
  REG_Stream0=150,
  REG_Stream1=151,
  REG_Stream2=152,
  REG_Stream3=153,
  REG_Stream4=154,
} RoverRegister_t;
#define MAX_REGISTER_NUMBER_Registers 154
#define NUM_REGISTERS_Registers 155
typedef struct {
uint16_t RegisterVersion; // 0
 int16_t OpenVal; // 1
 int16_t RoverMode; // 2
 int16_t Status; // 3
 int16_t CurrentPosAbs; // 4
 int16_t TravelDir; // 5
 int16_t PerpLineCount; // 6
uint16_t RoverCommandNo; // 7
uint16_t CompletedRoverCommandNo; // 8
uint16_t LastReceivedRoverCommandNo; // 9
uint16_t FailedRoverCommandNo; // 10
uint16_t LiftCommandNo; // 11
 int16_t LiftLoad; // 12
uint16_t LastReceivedLiftCommandNo; // 13
uint16_t CompletedLiftCommandNo; // 14
 int16_t LiftPosition; // 15
 int16_t BatteryRemaining; // 16
uint16_t FirmwareVersion; // 17
 int32_t ConfigDataVersion; // 18
          // 19 (skipped. high word complement to previous low word)
 int16_t RoverSerial; // 20
 int16_t ExtraSpace; // 21
uint32_t XbeeSerial; // 22
          // 23 (skipped. high word complement to previous low word)
uint16_t FailedLiftCommandNo; // 24
uint16_t TimeOffLine; // 25
 int32_t CurrentPos; // 26
          // 27 (skipped. high word complement to previous low word)
 int32_t CurrentZero; // 28
          // 29 (skipped. high word complement to previous low word)
 int32_t CommandStartPos; // 30
          // 31 (skipped. high word complement to previous low word)
 int16_t CurrentVelocity; // 32
uint16_t Temperature; // 33
 int16_t LineFollowSpeed; // 34
 int16_t ApproachSpeed; // 35
 int16_t TurnSpeed; // 36
 int16_t PerpLineGoal; // 37
 int16_t TurnRadius; // 38
 int16_t TurnAngle; // 39
 int16_t CurrentAngle; // 40
 int16_t TargetPos; // 41
 int16_t PosAbs; // 42
 int16_t OverrideSafety; // 43
 int16_t LiftTargetPosition; // 44
uint16_t DistToObj; // 45
 int16_t SlowdownFactor; // 46
uint16_t TimeStopped; // 47
 int32_t LiftLoadRaw; // 48
          // 49 (skipped. high word complement to previous low word)
 int32_t BuildDate; // 50
          // 51 (skipped. high word complement to previous low word)
 int32_t TimeUp; // 52
          // 53 (skipped. high word complement to previous low word)
uint32_t RtcTicks; // 54
          // 55 (skipped. high word complement to previous low word)
 int32_t DapDate; // 56
          // 57 (skipped. high word complement to previous low word)
 int16_t AdcCycleUs; // 58
uint16_t RoverCycleUs; // 59
uint16_t CommandTimeMs; // 60
uint16_t RoverStandbyTimeDs; // 61
 int16_t FwdLinePosition; // 62
 int16_t FwdLastLinePosition; // 63
 int16_t FwdLineStatus; // 64
 int16_t AftLinePosition; // 65
 int16_t AftLastLinePosition; // 66
 int16_t AftLineStatus; // 67
 int16_t DIOMode; // 68
 int16_t DIO; // 69
 int32_t DIO104CMode; // 70
          // 71 (skipped. high word complement to previous low word)
 int32_t DIO104C; // 72
          // 73 (skipped. high word complement to previous low word)
 int16_t PulsesPerMm; // 74
uint16_t RawDistOutput; // 75
 int32_t LiftStatus; // 76
          // 77 (skipped. high word complement to previous low word)
 int32_t RoverLeftStatus; // 78
          // 79 (skipped. high word complement to previous low word)
 int32_t RoverRightStatus; // 80
          // 81 (skipped. high word complement to previous low word)
 int32_t LiftRawPosition; // 82
          // 83 (skipped. high word complement to previous low word)
 int32_t RoverLeftRawPosition; // 84
          // 85 (skipped. high word complement to previous low word)
 int32_t RoverRightRawPosition; // 86
          // 87 (skipped. high word complement to previous low word)
 int32_t LiftRawVelocity; // 88
          // 89 (skipped. high word complement to previous low word)
 int32_t RoverLeftRawVelocity; // 90
          // 91 (skipped. high word complement to previous low word)
 int32_t RoverRightRawVelocity; // 92
          // 93 (skipped. high word complement to previous low word)
 int16_t LiftCurrent; // 94
 int16_t RoverLeftCurrent; // 95
 int16_t RoverRightCurrent; // 96
 int16_t CurrentMA; // 97
 int16_t CoulombCountMAH; // 98
 int16_t LineStatus; // 99
uint16_t Adc0; // 100
uint16_t Adc1; // 101
uint16_t Adc2; // 102
uint16_t Adc3; // 103
uint16_t Adc4; // 104
uint16_t Adc5; // 105
uint16_t Adc6; // 106
uint16_t Adc7; // 107
uint16_t Adc8; // 108
uint16_t Adc9; // 109
uint16_t Adc10; // 110
uint16_t Adc11; // 111
uint16_t Adc12; // 112
uint16_t Adc13; // 113
uint16_t Adc14; // 114
uint16_t Adc15; // 115
uint16_t Adc16; // 116
uint16_t Adc17; // 117
uint16_t Adc18; // 118
uint16_t Adc19; // 119
uint16_t Adc20; // 120
uint16_t Adc21; // 121
uint16_t Adc22; // 122
uint16_t Adc23; // 123
uint16_t BoardADC0; // 124
uint16_t BoardADC1; // 125
uint16_t BoardADC2; // 126
uint16_t BoardADC3; // 127
uint16_t BoardADC4; // 128
 int16_t Blank; // 129
 int32_t Alarm; // 130
          // 131 (skipped. high word complement to previous low word)
 int16_t ReadTimeout; // 132
 int16_t CommandBadLengthCount; // 133
 int16_t CommandProcessTime; // 134
 int16_t CommandBadCrcCount; // 135
uint16_t DigimeshFirmwareRev; // 136
uint16_t DigimeshHardwareRev; // 137
uint16_t RadioMaxPacketSize; // 138
 int16_t RadioRxPackets; // 139
 int16_t RadioTxPackets; // 140
 int16_t RadioStatistic; // 141
 int16_t RadioTxRetries; // 142
 int16_t RadioTxFailures; // 143
 int16_t ReceivedSignalStrength; // 144
 int16_t RadioReadBytes; // 145
 int16_t RadioWriteBytes; // 146
 int16_t XbeeTxInitiated; // 147
 int16_t XbeeTxCompleted; // 148
 int16_t LatestPacketId; // 149
uint16_t Stream0; // 150
uint16_t Stream1; // 151
uint16_t Stream2; // 152
uint16_t Stream3; // 153
uint16_t Stream4; // 154
} Registers_t;
// DO NOT EDIT THIS FILE. This output is automated and any changes will be overwritten.
// It uses the Fulfil.Libs.Machines.LFR.LFB1Register+ConfigParameters enum as input
typedef enum {
  CFG_ConfigDataVersion=0,
  CFG_LineFollowP=1,
  CFG_LineFollowI=2,
  CFG_LineFollowD=3,
  CFG_PositionP=4,
  CFG_PositionI=5,
  CFG_PositionD=6,
  CFG_TurnP=7,
  CFG_TurnI=8,
  CFG_TurnD=9,
  CFG_NoLineStopMs=10,
  CFG_TurnAngleTol=11,
  CFG_TurnLineTol=12,
  CFG_StraightTol=13,
  CFG_LineGoal=14,
  CFG_PerpBuffer=15,
  CFG_AxleWidth=16,
  CFG_Axle2Sensor=17,
  CFG_MotorFlip=18,
  CFG_TapeWidth=19,
  CFG_TorqueP=20,
  CFG_TorqueI=21,
  CFG_VelocityP=22,
  CFG_VelocityI=23,
  CFG_CommutationMode=24,
  CFG_MotorPoles=25,
  CFG_EncoderSteps=26,
  CFG_EncoderInitMode=27,
  CFG_EncoderInitDelay=28,
  CFG_MaxAcceleration=29,
  CFG_MinAcceleration=30,
  CFG_InitialAccelStepMs=31,
  CFG_AccelerationTimeMs=32,
  CFG_StoredAccelLimitPercent=33,
  CFG_SleepUs=34,
  CFG_PositionReachedBound=35,
  CFG_PositionReachedVelBound=36,
  CFG_PositionHardDecelBound=37,
  CFG_GridApproachLimit=38,
  CFG_RawConst=39,
  CFG_RawExp=40,
  CFG_StopBound=41,
  CFG_SlowdownBound=42,
  CFG_BatteryMaxCap=43,
  CFG_BatteryChargedThreshold=44,
  CFG_LineLimit=45,
  CFG_LineNoiseLimit=46,
  CFG_LineEdgeBand=47,
  CFG_LineFlip=48,
  CFG_LiftMax=49,
  CFG_LiftMin=50,
  CFG_LiftRelease=51,
  CFG_ADCDelayUs=52,
  CFG_ADCExpFilterPercent=53,
  CFG_SpeedResendLimit=54,
  CFG_SpeedBeyondLimit=55,
  CFG_LiftSleepUs=56,
  CFG_LiftMaxCurrent=57,
  CFG_LiftMicroStepFactor=58,
  CFG_LiftStepsPerRev=59,
  CFG_LiftDriveDiameterUm=60,
  CFG_BatteryChargedThresholdTimeMs=61,
  CFG_TareTimeMs=62,
  CFG_GearRatioMilli=63,
  CFG_WheelDiameterMm=64,
  CFG_MaxCurrent=65,
  CFG_BrakeCurrent=66,
  CFG_LoopSleepUs=67,
  CFG_PerpWindow=68,
  CFG_MinPerpLineWidth=69,
  CFG_DriverAcceleration=70,
  CFG_MinSpeed=71,
  CFG_ProfileStartSpeed=72,
  CFG_LiftHomeSpread=73,
  CFG_TurnApproachSpeed=74,
  CFG_SwoopRadiusOffset=75,
  CFG_SwoopPreDistance=76,
  CFG_SwoopIntersectAngle=77,
  CFG_SwoopStraightenEndAngle=78,
  CFG_CutJuiceCurrent=79,
  CFG_SmallestAccelRatioPercent=80,
  CFG_SmallestLineGainRatioPercent=81,
  CFG_DecelAngle=82,
  CFG_LineLostDistance=83,
  CFG_CalibrationSpeed=84,
  CFG_MissedPerpRetraceDistance=85,
  CFG_DockingAdjustmentDistance=86,
  CFG_DockingAdjustmentStep=87,
  CFG_CommandTimeout=88,
  CFG_AccelAdjustmentStart=89,
  CFG_AccelAdjustmentMin=90,
  CFG_PerpDecelBuffer=91,
  CFG_LineDarkLimit=92,
  CFG_LoadCellEnableLog=93,
  CFG_LoadCellDebounceCs=94,
  CFG_LoadCellConvedSigThresh=95,
  CFG_LoadCellFuncCheckCs=96,
  CFG_LoadCellFuncCheckThresh=97,
  CFG_DockingTimeMs=98,
  CFG_ChargeCheckTimeMs=99,
  CFG_MaxAbsPos=100,
  CFG_AllowableSkipPerpCount=101,
  CFG_LineSensorDimmerVal=102,
  CFG_LoadCellMedFiltWidth=103,
  CFG_LoadCellLowPassParameterPercent=104,
  CFG_LoadCellThreshTimeToDecayToTenPercentMs=105,
  CFG_LoadCellThreshToPeakRatioPercent=106,
  CFG_LoadCellConvolveWindow=107,
  CFG_LoadCellSettleWaitTimeMs=108,
  CFG_PreSettleLogTimeMs=109,
  CFG_LastConfig=110,
} MotorRegister_t;
#define MAX_REGISTER_NUMBER_ConfigParameters 110
#define NUM_REGISTERS_ConfigParameters 111
typedef struct {
 int32_t ConfigDataVersion; // 0
 int32_t LineFollowP; // 1
 int32_t LineFollowI; // 2
 int32_t LineFollowD; // 3
 int32_t PositionP; // 4
 int32_t PositionI; // 5
 int32_t PositionD; // 6
 int32_t TurnP; // 7
 int32_t TurnI; // 8
 int32_t TurnD; // 9
 int32_t NoLineStopMs; // 10
 int32_t TurnAngleTol; // 11
 int32_t TurnLineTol; // 12
 int32_t StraightTol; // 13
 int32_t LineGoal; // 14
 int32_t PerpBuffer; // 15
 int32_t AxleWidth; // 16
 int32_t Axle2Sensor; // 17
 int32_t MotorFlip; // 18
 int32_t TapeWidth; // 19
 int32_t TorqueP; // 20
 int32_t TorqueI; // 21
 int32_t VelocityP; // 22
 int32_t VelocityI; // 23
 int32_t CommutationMode; // 24
 int32_t MotorPoles; // 25
 int32_t EncoderSteps; // 26
 int32_t EncoderInitMode; // 27
 int32_t EncoderInitDelay; // 28
 int32_t MaxAcceleration; // 29
 int32_t MinAcceleration; // 30
 int32_t InitialAccelStepMs; // 31
 int32_t AccelerationTimeMs; // 32
 int32_t StoredAccelLimitPercent; // 33
 int32_t SleepUs; // 34
 int32_t PositionReachedBound; // 35
 int32_t PositionReachedVelBound; // 36
 int32_t PositionHardDecelBound; // 37
 int32_t GridApproachLimit; // 38
 int32_t RawConst; // 39
 int32_t RawExp; // 40
 int32_t StopBound; // 41
 int32_t SlowdownBound; // 42
 int32_t BatteryMaxCap; // 43
 int32_t BatteryChargedThreshold; // 44
 int32_t LineLimit; // 45
 int32_t LineNoiseLimit; // 46
 int32_t LineEdgeBand; // 47
 int32_t LineFlip; // 48
 int32_t LiftMax; // 49
 int32_t LiftMin; // 50
 int32_t LiftRelease; // 51
 int32_t ADCDelayUs; // 52
 int32_t ADCExpFilterPercent; // 53
 int32_t SpeedResendLimit; // 54
 int32_t SpeedBeyondLimit; // 55
 int32_t LiftSleepUs; // 56
 int32_t LiftMaxCurrent; // 57
 int32_t LiftMicroStepFactor; // 58
 int32_t LiftStepsPerRev; // 59
 int32_t LiftDriveDiameterUm; // 60
 int32_t BatteryChargedThresholdTimeMs; // 61
 int32_t TareTimeMs; // 62
 int32_t GearRatioMilli; // 63
 int32_t WheelDiameterMm; // 64
 int32_t MaxCurrent; // 65
 int32_t BrakeCurrent; // 66
 int32_t LoopSleepUs; // 67
 int32_t PerpWindow; // 68
 int32_t MinPerpLineWidth; // 69
 int32_t DriverAcceleration; // 70
 int32_t MinSpeed; // 71
 int32_t ProfileStartSpeed; // 72
 int32_t LiftHomeSpread; // 73
 int32_t TurnApproachSpeed; // 74
 int32_t SwoopRadiusOffset; // 75
 int32_t SwoopPreDistance; // 76
 int32_t SwoopIntersectAngle; // 77
 int32_t SwoopStraightenEndAngle; // 78
 int32_t CutJuiceCurrent; // 79
 int32_t SmallestAccelRatioPercent; // 80
 int32_t SmallestLineGainRatioPercent; // 81
 int32_t DecelAngle; // 82
 int32_t LineLostDistance; // 83
 int32_t CalibrationSpeed; // 84
 int32_t MissedPerpRetraceDistance; // 85
 int32_t DockingAdjustmentDistance; // 86
 int32_t DockingAdjustmentStep; // 87
 int32_t CommandTimeout; // 88
 int32_t AccelAdjustmentStart; // 89
 int32_t AccelAdjustmentMin; // 90
 int32_t PerpDecelBuffer; // 91
 int32_t LineDarkLimit; // 92
 int32_t LoadCellEnableLog; // 93
 int32_t LoadCellDebounceCs; // 94
 int32_t LoadCellConvedSigThresh; // 95
 int32_t LoadCellFuncCheckCs; // 96
 int32_t LoadCellFuncCheckThresh; // 97
 int32_t DockingTimeMs; // 98
 int32_t ChargeCheckTimeMs; // 99
 int32_t MaxAbsPos; // 100
 int32_t AllowableSkipPerpCount; // 101
 int32_t LineSensorDimmerVal; // 102
 int32_t LoadCellMedFiltWidth; // 103
 int32_t LoadCellLowPassParameterPercent; // 104
 int32_t LoadCellThreshTimeToDecayToTenPercentMs; // 105
 int32_t LoadCellThreshToPeakRatioPercent; // 106
 int32_t LoadCellConvolveWindow; // 107
 int32_t LoadCellSettleWaitTimeMs; // 108
 int32_t PreSettleLogTimeMs; // 109
 int32_t LastConfig; // 110
} ConfigRegisters_t;
// DO NOT EDIT THIS FILE. This output is automated and any changes will be overwritten.
// It uses the Fulfil.Libs.Machines.LFR.LFB1Register+PersistentRegisters enum as input
typedef enum {
  PERSIST_Adc0CalMin=0,
  PERSIST_Adc0CalMax=1,
  PERSIST_Adc1CalMin=2,
  PERSIST_Adc1CalMax=3,
  PERSIST_Adc2CalMin=4,
  PERSIST_Adc2CalMax=5,
  PERSIST_Adc3CalMin=6,
  PERSIST_Adc3CalMax=7,
  PERSIST_Adc4CalMin=8,
  PERSIST_Adc4CalMax=9,
  PERSIST_Adc5CalMin=10,
  PERSIST_Adc5CalMax=11,
  PERSIST_Adc6CalMin=12,
  PERSIST_Adc6CalMax=13,
  PERSIST_Adc7CalMin=14,
  PERSIST_Adc7CalMax=15,
  PERSIST_Adc8CalMin=16,
  PERSIST_Adc8CalMax=17,
  PERSIST_Adc9CalMin=18,
  PERSIST_Adc9CalMax=19,
  PERSIST_Adc10CalMin=20,
  PERSIST_Adc10CalMax=21,
  PERSIST_Adc11CalMin=22,
  PERSIST_Adc11CalMax=23,
  PERSIST_Adc12CalMin=24,
  PERSIST_Adc12CalMax=25,
  PERSIST_Adc13CalMin=26,
  PERSIST_Adc13CalMax=27,
  PERSIST_Adc14CalMin=28,
  PERSIST_Adc14CalMax=29,
  PERSIST_Adc15CalMin=30,
  PERSIST_Adc15CalMax=31,
  PERSIST_Adc16CalMin=32,
  PERSIST_Adc16CalMax=33,
  PERSIST_Adc17CalMin=34,
  PERSIST_Adc17CalMax=35,
  PERSIST_Adc18CalMin=36,
  PERSIST_Adc18CalMax=37,
  PERSIST_Adc19CalMin=38,
  PERSIST_Adc19CalMax=39,
  PERSIST_Adc20CalMin=40,
  PERSIST_Adc20CalMax=41,
  PERSIST_Adc21CalMin=42,
  PERSIST_Adc21CalMax=43,
  PERSIST_Adc22CalMin=44,
  PERSIST_Adc22CalMax=45,
  PERSIST_Adc23CalMin=46,
  PERSIST_Adc23CalMax=47,
  PERSIST_Ironman=48,
  PERSIST_IronmanDistance=49,
  PERSIST_CoulombCountMAMS_L=50,
  PERSIST_CoulombCountMAMS_H=51,
  PERSIST_LastPersist=52,
} Param_t;
#define MAX_REGISTER_NUMBER_PersistentRegisters 52
#define NUM_REGISTERS_PersistentRegisters 53
typedef struct {
 int32_t Adc0CalMin; // 0
 int32_t Adc0CalMax; // 1
 int32_t Adc1CalMin; // 2
 int32_t Adc1CalMax; // 3
 int32_t Adc2CalMin; // 4
 int32_t Adc2CalMax; // 5
 int32_t Adc3CalMin; // 6
 int32_t Adc3CalMax; // 7
 int32_t Adc4CalMin; // 8
 int32_t Adc4CalMax; // 9
 int32_t Adc5CalMin; // 10
 int32_t Adc5CalMax; // 11
 int32_t Adc6CalMin; // 12
 int32_t Adc6CalMax; // 13
 int32_t Adc7CalMin; // 14
 int32_t Adc7CalMax; // 15
 int32_t Adc8CalMin; // 16
 int32_t Adc8CalMax; // 17
 int32_t Adc9CalMin; // 18
 int32_t Adc9CalMax; // 19
 int32_t Adc10CalMin; // 20
 int32_t Adc10CalMax; // 21
 int32_t Adc11CalMin; // 22
 int32_t Adc11CalMax; // 23
 int32_t Adc12CalMin; // 24
 int32_t Adc12CalMax; // 25
 int32_t Adc13CalMin; // 26
 int32_t Adc13CalMax; // 27
 int32_t Adc14CalMin; // 28
 int32_t Adc14CalMax; // 29
 int32_t Adc15CalMin; // 30
 int32_t Adc15CalMax; // 31
 int32_t Adc16CalMin; // 32
 int32_t Adc16CalMax; // 33
 int32_t Adc17CalMin; // 34
 int32_t Adc17CalMax; // 35
 int32_t Adc18CalMin; // 36
 int32_t Adc18CalMax; // 37
 int32_t Adc19CalMin; // 38
 int32_t Adc19CalMax; // 39
 int32_t Adc20CalMin; // 40
 int32_t Adc20CalMax; // 41
 int32_t Adc21CalMin; // 42
 int32_t Adc21CalMax; // 43
 int32_t Adc22CalMin; // 44
 int32_t Adc22CalMax; // 45
 int32_t Adc23CalMin; // 46
 int32_t Adc23CalMax; // 47
 int32_t Ironman; // 48
 int32_t IronmanDistance; // 49
 int64_t CoulombCountMAMS; // 50
          // 51 (skipped. high word complement to previous low word)
 int32_t LastPersist; // 52
} PersistentRegisters_t;
// DO NOT EDIT THIS FILE. This output is automated and any changes will be overwritten.
// It uses the Fulfil.Libs.Machines.LFR.Register+RoverCommandParameters enum as input
typedef enum {
  RVRCMDPARAM_PerpLineGoal=0,
  RVRCMDPARAM_TravelDir=1,
  RVRCMDPARAM_TurnRadius=2,
  RVRCMDPARAM_TurnAngle=3,
  RVRCMDPARAM_CommandMode=4,
  RVRCMDPARAM_TargetPos=5,
  RVRCMDPARAM_PosAbs=6,
  RVRCMDPARAM_Speed=7,
  RVRCMDPARAM_ApproachSpeed=8,
  RVRCMDPARAM_OperationFlags=9,
  RVRCMDPARAM_Accel=10,
  RVRCMDPARAM_CommandNo=11,
} RvrCmdParam_t;
#define MAX_REGISTER_NUMBER_RoverCommandParameters 11
#define NUM_REGISTERS_RoverCommandParameters 12
typedef struct {
 int32_t PerpLineGoal; // 0
 int32_t TravelDir; // 1
 int32_t TurnRadius; // 2
 int32_t TurnAngle; // 3
 int32_t CommandMode; // 4
 int32_t TargetPos; // 5
 int32_t PosAbs; // 6
 int32_t Speed; // 7
 int32_t ApproachSpeed; // 8
 int32_t OperationFlags; // 9
 int32_t Accel; // 10
 int32_t CommandNo; // 11
} RoverCommandRegisters_t;
// DO NOT EDIT THIS FILE. This output is automated and any changes will be overwritten.
// It uses the Fulfil.Libs.Machines.LFR.Register+LiftCommandParameters enum as input
typedef enum {
  LIFTCMDPARAM_TargetPos=0,
  LIFTCMDPARAM_Speed=1,
  LIFTCMDPARAM_Accel=2,
  LIFTCMDPARAM_PosAbs=3,
  LIFTCMDPARAM_Mode=4,
  LIFTCMDPARAM_RC=5,
  LIFTCMDPARAM_CommandNo=6,
} LiftCmdParam_t;
#define MAX_REGISTER_NUMBER_LiftCommandParameters 6
#define NUM_REGISTERS_LiftCommandParameters 7
typedef struct {
 int32_t TargetPos; // 0
 int32_t Speed; // 1
 int32_t Accel; // 2
 int32_t PosAbs; // 3
 int32_t Mode; // 4
 int32_t RC; // 5
 int32_t CommandNo; // 6
} LiftCommandRegisters_t;
typedef enum {
  OPFLAGS_OverrideSafety = 0x1,
  OPFLAGS_NoLine = 0x2,
  OPFLAGS_ChargeDocking = 0x4,
} OpFlags_t;
typedef enum {
  COMMAND_NOP = 0x0,
  COMMAND_WriteRamRegister = 0x1,
  COMMAND_ReadRamRegister = 0x2,
  COMMAND_WriteAlgorithmRegister = 0x3,
  COMMAND_ReadAlgorithmRegister = 0x4,
  COMMAND_WriteConfigRegister = 0x5,
  COMMAND_ReadConfigRegister = 0x6,
  COMMAND_WriteRoverCommandRegister = 0x7,
  COMMAND_WriteLiftCommandRegister = 0x8,
  COMMAND_WritePersistRegister = 0x9,
  COMMAND_ReadPersistRegister = 0xA,
  COMMAND_RadioSelect = 0xB,
  COMMAND_MoveStepper = 0xC,
  COMMAND_Ironman = 0xD,
  COMMAND_HomeStepper = 0xE,
  COMMAND_ReadStepperRegister = 0xF,
  COMMAND_FileBeginWrite = 0x10,
  COMMAND_FileWrite = 0x11,
  COMMAND_FileEndWrite = 0x12,
  COMMAND_CompileAndReboot = 0x13,
  COMMAND_ClearFiles = 0x14,
  COMMAND_TareScale = 0x15,
  COMMAND_UpdateFw = 0x16,
  COMMAND_EStop = 0x17,
  COMMAND_Reboot = 0x18,
  COMMAND_EnableCharge = 0x19,
  COMMAND_DisableCharge = 0x1A,
  COMMAND_Honk = 0x1B,
  COMMAND_PrepareForDispense = 0x1C,
  COMMAND_TransmitLog = 0x1D,
  COMMAND_ClearLog = 0x1E,
  COMMAND_TransmitAllLogs = 0x1F,
} Command_t;
typedef enum {
  FLAGS_CommandTimeout = 0x1,
  FLAGS_LiftHomed = 0x2,
  FLAGS_EStopOn = 0x4,
  FLAGS_TrustLoadCell = 0x8,
  FLAGS_LineFailure = 0x10,
  FLAGS_PositionError = 0x20,
  FLAGS_ChargeEnabled = 0x40,
  FLAGS_Charging = 0x80,
  FLAGS_Charged = 0x100,
  FLAGS_NotCalibrated = 0x200,
  FLAGS_LiftHomeSpread = 0x400,
  FLAGS_MissedPerp = 0x800,
  FLAGS_ErrorHandling = 0x1000,
  FLAGS_Ready2Receive = 0x2000,
  FLAGS_CompletedQ = 0x4000,
  FLAGS_Failed = 0x8000,
} Flags_t;
typedef enum {
  ROVERMODE_Standby = 0x0,
  ROVERMODE_Initialize = 0x1,
  ROVERMODE_ManualLfr = 0x2,
  ROVERMODE_ManualGoPosition = 0x3,
  ROVERMODE_SoftReset = 0x4,
  ROVERMODE_ManualTurn = 0x5,
  ROVERMODE_ManualGoToGrid = 0x6,
  ROVERMODE_StraightenAndZero = 0x7,
  ROVERMODE_CalibrateLine = 0x8,
  ROVERMODE_RunLineFollowAuto = 0x9,
  ROVERMODE_Straighten = 0xA,
  ROVERMODE_CheckForCharging = 0xB,
  ROVERMODE_StopRover = 0x63,
} RoverMode_t;
typedef enum {
  LIFTMODE_LiftCommand = 0x100,
  LIFTMODE_Standby = 0x101,
  LIFTMODE_Move = 0x102,
  LIFTMODE_Stop = 0x103,
  LIFTMODE_Home = 0x104,
} LiftMode_t;
class LiftLoadBitOps {
  public:
    const static uint16_t ItemCountBitLength = 0x5;
    const static uint16_t ItemCountMask = 0x1F;
    const static uint16_t LoadMask = 0xFFE0;
};
class LiftPosBitOps {
  public:
    const static uint16_t PosMask = 0x81FF;
    const static uint16_t LiftActiveFlagOffset = 0x9;
    const static uint16_t RobotActiveFlagOffset = 0xA;
    const static uint16_t LiftHomeSpreadOffset = 0xB;
    const static uint16_t LiftActiveMask = 0x200;
    const static uint16_t RobotActiveMask = 0x400;
    const static uint16_t LiftHomeSpreadMask = 0x800;
    const static uint16_t SignMask_U16 = 0x8000;
};
class TravelDirBitOps {
  public:
    const static uint16_t DirMask = 0x1;
    const static uint16_t InDispenseMask = 0x2;
    const static uint16_t InDispenseOffset = 0x1;
    const static uint16_t DirBitOffset = 0x0;
};
typedef enum {
  DIO_LineFWDEnable = 0x602,
  DIO_LineAFTEnable = 0x603,
  DIO_DistanceFWDEnable = 0x604,
  DIO_DistanceAFTEnable = 0x605,
  DIO_LiftHomeEnable = 0x606,
  DIO_BagSensorEnable = 0x607,
  DIO_Home1Status = 0x608,
  DIO_Home2Status = 0x609,
  DIO_BagStatus = 0x60A,
  DIO_LiftEnable = 0x60B,
  DIO_LoadCellCLK = 0x60E,
  DIO_LoadCellDATA = 0x60F,
  DIO_ChargeEnable = 0x610,
  DIO_EStop = 0x611,
  DIO_BrakeEnable = 0x612,
  DIO_PowerPCB4 = 0x613,
} Dio_t;
typedef enum {
  TS7800ADC_V_Base = 0x3,
  TS7800ADC_V_Measured = 0x4,
} TS7800ADC_t;
#endif //_REGISTERS_H_
